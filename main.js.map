{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/instrument.js","webpack:///./src/gui.js","webpack:///./src/index.js","webpack:///./src/style.css","webpack:///./src/style.css?7528"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAQ,oBAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAiB,4BAA4B;AAC7C;AACA;AACA,0BAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAgB,uBAAuB;AACvC;;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIgD;AAChD;AACA;AACqB;;AAErB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;;AAEA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA,UAAU,SAAS;AACnB,UAAU,OAAO;AACjB;AACA,UAAU,OAAO;AACjB;AACA,UAAU,SAAS;AACnB,UAAU,SAAS;AACnB;AACA,UAAU,OAAO;AACjB;AACA,UAAU,SAAS;AACnB,UAAU,OAAO;AACjB;AACA,UAAU,OAAO;AACjB;AACA,UAAU,SAAS;AACnB;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;;;;;ACzMA;AACA;AACA;AACa;;AAEb;AACqC;;AAErC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,C;;ACxIkE;AAC3B;AACvC;AACqB;;AAErB;AAC4C;;AAE5C,KAAK,yLAA8E;;AAEnF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA,yB;;;;;;;AClKA;AACA;;;AAGA;AACA,wCAAyC,mBAAmB,yBAAyB,oBAAoB,mBAAmB,mBAAmB,6BAA6B,GAAG,0BAA0B,iBAAiB,gBAAgB,GAAG,wBAAwB,wBAAwB,GAAG,sBAAsB,kBAAkB,mBAAmB,yBAAyB,GAAG;;AAEvX;;;;;;;;;ACNA;;AAEA;;AAEA;AACA;;;;AAIA,eAAe;;AAEf;AACA;;AAEA;;AAEA;;AAEA,Y","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([34,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Transport, Time, Event, Draw, context } from 'tone'\nimport Noise from 'noisejs'\nimport Perlin from \"proc-noise\"\nimport {randomNormal} from 'd3-random'\n\nexport function toSecs(notation) {\n    return Time(notation).toSeconds()\n}\n\n// let noise = new Noise(Math.random())\nlet perlin = new Perlin(Math.random())\n\nfunction timeMap(start, length, from, to) {\n    to = typeof to === 'undefined' ? 1 : to\n    from = from || 0\n\n    return Math.min(to, Math.max(from + to * (Date.now() - start) / length, from))\n}\n/**@param {String[]} chordArr\n * @param {Function} dist\n * @param {Number} [baseVal]\n * @return {String}\n */\nexport function distToNote(chordArr, dist, baseVal) {\n    baseVal = baseVal || 0\n\n    return floatToNote(chordArr, dist() + baseVal)\n}\n\n/**@param {Number[]} chordArr\n * @param {String} val\n * @return {String}\n */\nexport function floatToNote(chordArr, val) {\n    let octave = Math.floor(val)\n    let i = Math.floor((val - octave) * chordArr.length)\n\n    return chordArr[i] + String(octave)\n}\n\nexport function seconds() {\n    return Transport.seconds\n}\n\nexport function waitForTime(time) {\n    return new Promise(resolve => Transport.schedule(resolve, time));\n}\n\nfunction newSeed(){\n    return Math.random() * 99999\n}\n\n/**\n * @typedef {Object} RepeaterOptions\n * \n * @prop {Function} [getProbability]\n * @prop {Number} [probability]\n * \n * @prop {String} [quantize]\n * \n * @prop {String[]} [notes]\n * @prop {Function} [getNote]\n * \n * @prop {String} [note]\n * \n * @prop {Function} [getLength]\n * @prop {String} [length]\n * \n * @prop {String} [snap] snap the start of each note\n * \n * @prop {Function} onDraw\n * \n */\n\nexport class Repeater {\n    /**\n     * @param instrument\n     * @param {RepeaterOptions} options\n     */\n    constructor(instrument, options) {\n        let {quantize} = options;\n        this.note = options.note;\n        this.notes = options.notes;\n\n        this.note = options.note\n\n        let getLength = options.length ? () => options.length : \n            options.getLength\n\n        let getProbability = options.probability ? () => options.probability : \n            options.getProbability\n\n        let getNote = this.note ? () => this.note : \n            this.notes ? () => floatToNote(this.notes, options.getNote()) : \n                options.getNote\n\n        let seed = newSeed()\n        instrument.sync()\n        this.instrument = instrument\n\n        //transport callback\n        let playNote = function (time) {\n            let length = Math.max(0, getLength())\n\n            if(this.debug) console.log('test')\n\n            //quantize if exists\n            if (quantize){\n                length = Time(length).quantize(quantize)\n                if(length <= 0){\n                    length = toSecs(quantize)\n                }\n            }\n\n            if (Math.random() < getProbability() && 0 < length) {\n                let note = getNote()\n                // if(this.debug) console.log(note + ', ' + Time(length).toNotation())\n                instrument.triggerAttackRelease(note, length, time)\n                \n                Draw.schedule(() => {\n                    if(options.onDraw) options.onDraw(time, length, note, instrument.envelope)\n                    if(this.debug) console.log(note + ', ' + Time(length).toNotation())\n                }, time+context.lookAhead)\n                // if(options.onDraw) options.onDraw(time+context.lookAhead, length, note, instrument.envelope)\n\n            } else if(this.debug){\n                if(length <= 0)\n                    console.log(\"%cZERO LENGTH\", 'color: red')\n\n                console.log('| ' + Time(length).toNotation())\n            }\n            return length\n\n            // this.id = Transport.schedule(playNote, length + time - context.lookAhead)\n        }.bind(this)\n\n        let buffer = 0.5;\n\n        let minSecs = toSecs(quantize || \"64n\")\n\n        let processTime = 0;\n        let process = (time) => {\n            \n            //repeat till fills buffer time\n            while(processTime < time+buffer){\n                //jump up if behind\n                if(processTime < time){\n                    processTime = time+buffer\n                }\n\n                let length = playNote(processTime);\n                if(length < minSecs)\n                    length = minSecs\n\n                processTime += length\n            }\n        }\n\n        process(0)\n        Transport.scheduleRepeat(process, \"64n\")\n\n        //start it\n        // this.id = Transport.schedule(process, 0)\n    }\n\n    Cancel() {\n        Transport.clear(this.id)\n        this.instrument.volume.value = 0\n        return this\n    }\n\n    Debug(){\n        this.debug = true\n        return this\n    }\n}\n\n/**\n * \n * @param {Number} speed in seconds\n * @param {Number} [width] \n * @param {Number} [start] \n */\nexport function perlinNoise(speed, start, width, seed) {\n    width = width || 1\n    start = start || 0\n    seed = seed || newSeed()\n    return () => start + perlin.noise(seed + seconds() * speed) * width\n}\n\n/**\n * \n * @param {Function} getMean \n * @param {Number} dev \n */\nexport function movingMean(getMean, dev) {\n    return () => randomNormal(getMean(), dev)()\n}\n\nexport function staticReturn(val) {\n    return () => val;\n}","import JSONEditor from 'jsoneditor'\nimport 'jsoneditor/dist/jsoneditor.min.css'\nimport './style.css'\nimport {Note} from 'tonal'\n\nimport Perlin from \"proc-noise\"\nimport {perlinNoise, seconds, toSecs} from './instrument'\n\nlet perlin = new Perlin(Math.random())\n\nimport P5 from 'p5'\n\nconst p5 = new P5(p5 => {\n    p5.setup = () => {\n        let canvas = p5.createCanvas(p5.windowWidth, p5.windowHeight)\n        p5.windowResized()\n        canvas.parent(\"p5Container\")\n        // p5.setAttributes('antialias', true);\n\n        p5.colorMode(p5.HSB)\n        p5.ellipseMode(p5.RADIUS)\n    }\n\n    p5.draw = () => {\n        p5.fill(0, 0, 100)\n        draws.forEach(draw => draw(p5))\n    }\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight)\n        p5.background(0,0,0)\n    }\n})\n\nlet draws = []\n\nexport function circleDrawer(maxRadius, backgroundOnChange, middleWidth){\n    let changed = false;\n\n    let start;\n    let length;\n    let getX;\n    let getY;\n    let note;\n    let envelope;\n\n    let pulse = toSecs(\"8n\");\n    \n    maxRadius = maxRadius || 100;\n\n    draws.push(p5 => {\n        if(!start)\n            return\n            \n        let progress = (seconds()-start)/length\n\n        if(progress < 0)\n            return\n\n        let x = getX()\n        let y = getY()\n\n        if(changed && backgroundOnChange){\n            p5.noStroke()\n            p5.fill(0, 0, 0, 0.5)\n            // p5.ellipse(x, y, maxRadius, maxRadius)\n            p5.background(0,0,0, backgroundOnChange)\n            changed = false;\n        }\n\n        if(1 < progress)\n            return\n\n        let val = envelope ? envelope.value : 1-progress*0.2+0.03*Math.sin(seconds()/pulse*Math.PI-Math.PI)\n        let radius = maxRadius*val\n\n        let color = p5.color(note*360%360, 100*val, 90)\n        \n        p5.strokeWeight(7)\n        p5.stroke(color)\n        p5.noFill()\n        p5.ellipse(x, y, radius, radius)\n\n        if(middleWidth){\n            p5.noStroke()\n            p5.fill('white')\n            p5.ellipse(x, y, middleWidth, middleWidth)\n        }\n    })\n\n    return (newStart, newLength, newNote, newEnvelope) => {\n        changed = true\n        length = newLength\n        start = newStart\n        envelope = newEnvelope\n\n        note = ( Note.midi(newNote) || newNote.reduce((prev, note) => prev+Note.midi(note), 0)/newNote.length )/12\n        \n        let speed = note*note*0.002\n        getX = perlinNoise(speed, 0, p5.windowWidth, note*9999)\n        getY = perlinNoise(speed, 0, p5.windowHeight, note*19999)\n    }\n}\n\nexport default class SynthEditor{\n\n    /**\n     * @param {HTMLElement|String} container\n     * @param synth\n     */\n    constructor(container, synth){\n        if(typeof container == 'string'){\n            container = document.getElementById(container)\n        }\n\n        let options = synth.get()\n\n        let editor = new JSONEditor(container, {\n            mode: 'form',\n            onChange: () => {\n                try{\n                    let newOpts = editor.get();\n                    \n                    synth.set(newOpts)\n                    options = newOpts\n                    console.log(\"JSON Applied\")\n                } catch(err) {\n                    synth.set(options)\n                    // console.log(err)\n                    // melodySynth.set(melodySynthOpts)\n                }\n            }\n        }, options);\n\n        editor.expandAll()\n    }\n}","import Tone, { MembraneSynth, FMSynth, Transport, Synth, context } from 'tone'\nimport { Scale, Chord, Note, Distance } from 'tonal'\nimport * as Key from 'tonal-key'\nimport {randomNormal} from 'd3-random'\n\nimport * as Instrument from './instrument'\nimport SynthEditor, {doCircle, circleDrawer} from './gui'\n\nvar {staticReturn, perlinNoise, Repeater, floatToNote, toSecs, movingMean, seconds} = Instrument;\n\n//visual logic\nlet bases = Note.names(\" b\")\nlet base = bases[Math.floor(bases.length*Math.random())]\nlet key = base + (Math.random()<0.5 ? \" minor\" : \" major\")\nconsole.log(\"Key: \" + key)\nlet chords = Key.chords(key)\n\nlet i = 0;\nlet progressions = [[4,5,1], [2,5,1], [5,2,1], [3,2,1], [3,4,1]]\nlet progression = progressions[Math.floor(progressions.length*Math.random())]\n\nlet chord = Chord.notes(chords[progression[0]])\n\nTransport.scheduleRepeat(time => {\n    if(progression.length <= i){\n        progression = progressions[Math.floor(progressions.length*Math.random())]\n        i = 0\n    }\n\n    let newInt = progression[i]-1;\n    // let chord = Note.simplify(chords[newInt]) + \" minor blues\"\n    // notes = Scale.notes(chord).map(Note.simplify).map(note => note)\n    chord = Chord.notes(chords[newInt])\n    console.log(\"CHORD: \" + chord)\n    melody.notes = Scale.notes(Distance.transpose(base, \"1P\") + ' blues')\n\n    i++;\n}, \"4m\")\n\nlet notes = Scale.notes(key + ' blues')\n// let notes = chord.map()     \nconsole.log(\"notes: \" + notes)\n\nfunction getRandom(arr, n) {\n    var result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n\n\nTransport.bpm.value = 70+50*Math.random();\n\n//synthesisers\n\nvar melodySynth = new FMSynth({\n    \"harmonicity\": 8,\n    \"modulationIndex\": 10,\n    \"oscillator\": {\n        \"type\": \"square\"\n    },\n    \"envelope\": {\n        \"attack\": 0.01,\n        \"decay\": 1,\n        \"sustain\": 0.1,\n        \"release\": 2\n    },\n    \"modulation\": {\n        \"type\": \"square\"\n    },\n    \"modulationEnvelope\": {\n        \"attack\": 0.002,\n        \"decay\": 0.2,\n        \"sustain\": 0,\n        \"release\": 0.2\n    }\n}).toMaster()\n\nvar kickEff = new Tone.Distortion(0.2).toMaster();\nvar kickSynth = new MembraneSynth({\n    octaves: 6,\n    pitchDecay: toSecs(\"8n\"),\n    \"envelope\": {\n        \"attack\": 0.2,\n        \"attackCurve\": 'exponential',\n        \"release\": 0.1\n    }\n})\nkickSynth.connect(kickEff)\n\nlet cymbalSynth = new Tone.MetalSynth({\n    \n}).toMaster()\n\nlet effect = new Tone.Chorus(1/toSecs('4n'), 1/toSecs('2n'), 0.6).toMaster();\nlet bassSynth = new Tone.PolySynth(4, Tone.AMSynth)\nbassSynth.set({\n    harmonicity: 1,\n    oscillator: {\n        type: 'sine'\n    }\n})\nbassSynth.connect(effect)\n\nlet editor = new SynthEditor(\"jsoncontainer\", kickSynth)\n\n//instrument controllers\n\nlet percussionProb = perlinNoise(0.5, 0, 1)\n\n// new Instrument.Repeater(kickSynth, {\n//     note: \"C1\",\n//     getLength: randomNormal(toSecs(\"8n\"), toSecs(\"4n\")),\n//     length: \"8n\",\n//     quantize: '8n',\n//     getProbability: percussionProb,\n//     // probability: 1\n// }).Debug()\n\n// new Instrument.Repeater(cymbalSynth, {\n//     note: \"C0\",\n//     getLength: randomNormal(toSecs(\"8n\"), toSecs(\"4n\")),\n//     quantize: '8n',\n//     getProbability: percussionProb,\n//     // probability: 1\n// })\n\nnew Instrument.Repeater(bassSynth, {\n    // notes: Chord.notes(chords[progression[0]]),\n    // getNote: randomNormal(2, 0.5),\n    getNote: () => getRandom(chord, 3).map(val => val+\"3\"),\n    probability: 1,\n    getLength: randomNormal(toSecs(\"1m\"), toSecs(\"2n.\")),\n    quantize: '4n',\n    onDraw: circleDrawer(null, 0.2, 1.5)\n})\n\nlet melody = new Instrument.Repeater(melodySynth, {\n    notes: notes,\n    getNote: movingMean(perlinNoise(0.1, 3, 4), 0.5),\n    // getNote: perlinNoise(3, 3, 1),\n    // getNote: () => seconds()/3,\n    getProbability: perlinNoise(0.4, 0.4, 0.6),\n    // probability: 1,\n    getLength: movingMean(perlinNoise(0.4, toSecs(\"16n\"), toSecs(\"4n\")), toSecs(\"16n\")),\n    // length: toSecs('8n'),\n    // quantize: '16n',\n    // snap: \"8n\",\n    onDraw: circleDrawer(50)\n})\n\nTransport.swing = 1\ncontext.latencyHint = process.env.NODE_ENV == \"production\" ? \"playback\" : \"balanced\"\n\n//also starts transport\nTransport.start()","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#jsoncontainer{\\n    width: 400px;\\n    position: absolute;\\n    padding: 10px;\\n    opacity: 0.4;\\n    left: -400px;\\n\\n    transition: all 0.2s;\\n}\\n\\n#jsoncontainer:hover {\\n    opacity: 1;\\n    left: 0px;\\n}\\n\\n#jsoncontainer > * {\\n    background: white;\\n}\\n\\n#p5Container > * {\\n    width: 100%;\\n    height: 100%;\\n    position: absolute;\\n}\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../node_modules/css-loader/index.js!./style.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js!./style.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js!./style.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}